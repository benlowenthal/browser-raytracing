struct BVHNode {
	aabbMin: vec3f, offset: u32,
	aabbMax: vec3f,	triCount: u32
}

struct Tri {
	v0: u32, v1: u32, v2: u32,
	v0n: u32, v1n: u32, v2n: u32,
	v0t: u32, v1t: u32, v2t: u32,
	m: u32
}

struct Material {
	tex: u32,
	rough: f32,
	gloss: f32,
	transparency: f32,
	refIdx: f32,
	spec: f32,
	dummy1: f32,
	dummy2: f32
}

struct Camera {
	pos: vec3f, time: f32,
	rot: vec3f, accum_frames: u32
}

struct Ray {
	start: vec3f,
	dir: vec3f,
	invDir : vec3f
}

struct Hit {
	t: f32,
	u: f32,
	v: f32,
	i: u32
}


@group(0) @binding(0) var<uniform> dimension: vec2u;

@group(0) @binding(1) var<storage, read_write> frame: array<vec4f>;

@group(0) @binding(2) var<uniform> camera: Camera;
@group(0) @binding(3) var<uniform> lightPos: vec3f;

@group(0) @binding(10) var<storage> bvh: array<BVHNode>;
@group(0) @binding(11) var<storage> geo: array<f32>;
@group(0) @binding(12) var<storage> tri: array<Tri>;
@group(0) @binding(13) var<uniform> mat: array<Material, 64>;

@group(0) @binding(20) var textures: texture_2d_array<f32>;
@group(0) @binding(21) var texSampler: sampler;


fn parseVec2(i : u32) -> vec2f { return vec2f(geo[i], geo[i+1]); }
fn parseVec3(i : u32) -> vec3f { return vec3f(geo[i], geo[i+1], geo[i+2]); }

fn sampleTexture(coords : vec2f, layer : u32) -> vec3f { return textureSampleLevel(textures, texSampler, vec2f(coords.x, 1-coords.y), layer, 0f).xyz; }

fn intersectBVH(ray : Ray) -> Hit {
	var best = Hit(1e30f, 0f, 0f, 0u);
	if (intersectAABB(ray, best.t, bvh[0].aabbMin, bvh[0].aabbMax) == 1e30f) { return best; }

	var stack = array<u32, 32>();
	var head = 0i;
	stack[head] = 0u;

	while (head > -1i) {
		let pop = bvh[stack[head]];
		head--;

		if (pop.triCount > 0) {
			for (var i = pop.offset; i < pop.offset + pop.triCount; i++) {
				let test = intersectTri(ray, i);
				if (test.t < best.t) { best = test; }
			}
			continue;
		}

		let dist1 = intersectAABB(ray, best.t, bvh[pop.offset].aabbMin, bvh[pop.offset].aabbMax);
		let dist2 = intersectAABB(ray, best.t, bvh[pop.offset+1].aabbMin, bvh[pop.offset+1].aabbMax);

		let swap = dist1 < dist2;

		//push far child
		let far = select(pop.offset, pop.offset + 1, swap);
		let farDist = select(dist1, dist2, swap);
		if (farDist < 1e30f) { head++; stack[head] = far; }

		//push near child
		let near = select(pop.offset + 1, pop.offset, swap);
		let nearDist = select(dist2, dist1, swap);
		if (nearDist < 1e30f) { head++; stack[head] = near; }
	}

	return best;
}

fn intersectAABB(ray : Ray, dist : f32, bmin : vec3f, bmax : vec3f) -> f32 {
	let tx1 = (bmin.x - ray.start.x) * ray.invDir.x;
	let tx2 = (bmax.x - ray.start.x) * ray.invDir.x;
	let ty1 = (bmin.y - ray.start.y) * ray.invDir.y;
	let ty2 = (bmax.y - ray.start.y) * ray.invDir.y;
	let tz1 = (bmin.z - ray.start.z) * ray.invDir.z;
	let tz2 = (bmax.z - ray.start.z) * ray.invDir.z;

	let tmin = max(max(min(tx1, tx2), min(ty1, ty2)), min(tz1, tz2));
	let tmax = min(min(max(tx1, tx2), max(ty1, ty2)), max(tz1, tz2));

	return select(1e30f, tmin, (tmax >= tmin && tmin < dist && tmax > 0f));
}

fn intersectTri(ray : Ray, i : u32) -> Hit {
	const miss = Hit(1e30f, 0f, 0f, 0u);
	let tr = tri[i];
	let edge1 = parseVec3(tr.v1) - parseVec3(tr.v0);
	let edge2 = parseVec3(tr.v2) - parseVec3(tr.v0);
	let h = cross(ray.dir, edge2);
	let a = dot(edge1, h);
	if (a > -0.0001f && a < 0.0001f) { return miss; }
	let f = 1 / a;
	let s = ray.start - parseVec3(tr.v0);
	let u = f * dot(s, h);
	if (u < 0f || u > 1f) { return miss; }
	let q = cross(s, edge1);
	let v = f * dot(ray.dir, q);
	if (v < 0f || u + v > 1f) { return miss; }
	let t = f * dot(edge2, q);
	if (t > 0.0001f) { return Hit(t, u, v, i); }
	return miss;
}

fn random(v: vec3f) -> f32 {
	//random float between 0, 1
	var m = hash(bitcast<u32>(v.x)) ^ hash(bitcast<u32>(v.y)) ^ hash(bitcast<u32>(v.z));
	const ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32
    m &= ieeeMantissa;                // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                     // Add fractional part to 1.0
    return bitcast<f32>(m) - 1.0;     // Range [0:1]
}

fn hash(in: u32) -> u32 {
	var x = in;
	x += x << 10u;
    x ^= x >> 6u;
    x += x << 3u;
    x ^= x >> 11u;
    x += x << 15u;
    return x;
}

fn lightTest(hitPnt: vec3f, intensity: f32, seed: vec3f) -> f32 {
	let dir = lightPos - hitPnt;
	let lightDist = length(dir) - 0.0001f;
	let lightDir = normalize(dir + random(seed) * 0.2f);
	let lightRay = Ray(hitPnt + dir * 0.0001f, lightDir, 1 / lightDir);
	let lightOut = intersectBVH(lightRay);
	if (lightOut.t > lightDist) { return intensity / lightDist; }
	let hitMat = mat[tri[lightOut.i].m];
    return max((intensity * hitMat.transparency) / lightDist, 0);
}

@compute @workgroup_size(8,8)
fn computeMain(@builtin(global_invocation_id) globalIdx: vec3u) {
	const ambient = vec3f(0.5, 0.55, 0.65);
	const bounces = 15u;

	let frameIdx = globalIdx.y * dimension.x + globalIdx.x;
	let uv = vec3f(globalIdx);
	var seed = vec3f(uv.xy, camera.time);

	//early exit for pixel converging
	if (camera.accum_frames > 10 && frame[frameIdx].a < 0.0005f) { return; }

	let right = normalize(cross(vec3f(0, 1, 0), camera.rot));
	let up = normalize(cross(camera.rot, right));

	let dimFloat = vec2f(dimension);
	let ratio = dimFloat.y / dimFloat.x;
	let screenPos = vec2f(uv.x/(dimFloat.x/2f) - 1f, (1f - uv.y/(dimFloat.y/2f)) * ratio);

	let dir = normalize(camera.rot + screenPos.x * right + screenPos.y * up);

	//accumulate sample per pixel
	var color = vec3f(0);
	var throughput = vec3f(1);

	var ray = Ray(camera.pos, dir, 1 / dir);
	for (var bounce = 0u; bounce < bounces; bounce++) {
		let out = intersectBVH(ray);

		//ray missed all primitives
		if (out.t > 1e20f) {
			color += throughput * ambient;
			break;
		}
	
			
		let hitTri = tri[out.i];
		let bary = vec3f(1 - out.u - out.v, out.u, out.v);
		let material = mat[hitTri.m];

		let texUV = parseVec2(hitTri.v0t) * bary.x + parseVec2(hitTri.v1t) * bary.y + parseVec2(hitTri.v2t) * bary.z;
		let texColor = sampleTexture(texUV, material.tex);


		//emissive material override
		if (material.refIdx < 0) {
			color += throughput * texColor * -material.refIdx * 2;
			break;
		}


		let hitPnt = ray.start + ray.dir * out.t;
		let norm = normalize(parseVec3(hitTri.v0n) * bary.x + parseVec3(hitTri.v1n) * bary.y + parseVec3(hitTri.v2n) * bary.z);
		let diffuse = 1 - material.transparency;
		
		//direct light testing
		var light = 1f;
		if (random(seed * 0.999) < diffuse) { light = lightTest(hitPnt, 8, seed * 1.002); }
		color += throughput * texColor * diffuse * light;


		//choose one interaction
		let r = random(seed * 1.002);
		var newDir: vec3f;


		//schlick approx. for fresnel
		let F0 = material.gloss;
		let theta = dot(-ray.dir, norm);
		let fresnel = (F0 + (1 - F0) * pow(1 - abs(theta), 5)) * (1 - material.rough);

		if (r < fresnel) {
			newDir = reflect(ray.dir, norm);
			throughput *= texColor / fresnel;
		}

		else {
			let r2 = random(seed * 0.997);

			//diffuse
			if (r2 < diffuse) {
				//cosine hemisphere sampling
				let a = random(seed * 1.003) * 6.2831853;	//angle in radians
				let z = random(seed * 1.004) * 2 - 1;		//z from -1 to 1
				let r = sqrt(max(0.0, 1.0 - z * z));
				newDir = normalize(norm + vec3f(r * cos(a), r * sin(a), z));
				throughput *= texColor / (diffuse * (1 - fresnel));
			}

			//refract
			else{
				let ior = material.refIdx;

				//entering material
				if (dot(-ray.dir, norm) > 0) {
					newDir = refract(ray.dir, norm, 1 / ior);
					throughput *= texColor;
				}

				//exiting material
				else {
					let theta = dot(-ray.dir, -norm);
					let k = ior * ior * (1.0 - theta * theta);

					//if (k > 1) { newDir = reflect(ray.dir, -norm); }		//total internal reflection
					//else { newDir = refract(ray.dir, -norm, ior); }		//refraction

					newDir = select(refract(ray.dir, -norm, ior), reflect(ray.dir, -norm), k > 1);

					//beer-lambert absorption
					throughput *= pow(texColor, vec3f(-out.t));
				}
				
				throughput *= 1 / (material.transparency * (1 - fresnel));
			}

		}

		ray = Ray(hitPnt + newDir * 0.0001f, newDir, 1 / newDir);


		//terminate low energy paths
		var p = max(max(throughput.x, throughput.y), throughput.z);
		p = clamp(p, 0.0001, 0.9999);
		if (random(seed * 1.005) > p) { break; }
		throughput /= p; //compensate for lost rays

		throughput = min(throughput, vec3f(10));
		seed *= 1.01;
	}


	let prevColor = frame[frameIdx].xyz;

	color = (prevColor * f32(camera.accum_frames) + color) / f32(camera.accum_frames + 1);

	let diff = prevColor - color;
	frame[frameIdx] = vec4f(color, sqrt(dot(diff, diff) / 3)); //root mean square error
}

@vertex
fn vertexMain(@location(0) pos: vec2f) -> @builtin(position) vec4f {
	return vec4f(pos, 0, 1);
}

@fragment
fn fragmentMain(@builtin(position) uv: vec4f) -> @location(0) vec4f {
	let coords = vec2u(floor(uv.xy));
	let color = frame[coords.y * dimension.x + coords.x].xyz;

	let up = frame[(coords.y+1) * dimension.x + coords.x].xyz;
	let down = frame[(coords.y-1) * dimension.x + coords.x].xyz;
	let left = frame[coords.y * dimension.x + (coords.x-1)].xyz;
	let right = frame[coords.y * dimension.x + (coords.x+1)].xyz;

	//ACESFilm tonemapping
	const a = 2.51f;
	const b = 0.03f;
	const c = 2.43f;
	const d = 0.59f;
	const e = 0.14f;

	let x = (4 * color + up + down + left + right) / 8;
	return vec4f(saturate((x*(a*x+b))/(x*(c*x+d)+e)), 1);
}